# What to do
1.  Develop your own ai function and you should import your function in the client.py. The function should reuturn a decision object.
2.  Modify the client.py to import your function correctly.

#AI  
You should design your own ai program for the pokergame. 
The files which you could modify is modules/texaspoker/client/client.py and you should write ai program and put it under modules/texaspoker/AI.
You are allowed to add new files as many as you want.
Illegal movement would be considered as a fold action.

We have developed a native AI program under the modules/texaspoker/AI and the interpretation is at the root dir.
You can refer to this AI program example to develop your own program.

You can use the data structure defined in lib/client_lib.
You can refer to the printcard function in the client.py to see the mapping between numbers and cards.
The level field int the 

#How to run:
1.  Your computer should have python(Python3 is recommended) and grpc installed.
All the files in the path ./communicate and ./cpp except dealer.proto is generated by the grpc engine.
You can use the dealer.proto file to generate new version of python files under ./communicate in case of version conflict.

ex:
/opt/protobuf3/bin/protoc -Icommunicate --grpc_out=cpp/ --cpp_out=cpp/ --plugin=protoc-gen-grpc="/opt/3rd/grpc/bin/grpc_cpp_plugin" communicate/dealer.proto
/opt/anaconda3/bin/python -m grpc_tools.protoc -Icommunicate/ --python_out=communicate/ --grpc_python_out=communicate/ communicate/dealer.proto
Maybe you need to change the path in the generated python file:
sed -i 's/import dealer_pb2/from . import dealer_pb2/' communicate/dealer_pb2_grpc.py

2.  Enter the root dir of this project and run ${python_path}/python modules/texaspoker/client/client.py.
ex: linux> /opt/anaconda3/bin/python  modules/texaspoker/client/client.py username. The default port is 15000.
If we change the port, we would tell you how to change it.

3.  Remember that the username should be unique among all the participants. One username should only keep one alive connection.  

4.  You can NOT keep multiple connections for one username.
If you establish multiple connections at the certain time point, this behaviour would confuse the server and finally affect your score.
If you see "Wait for next game begin." printed on the screen and you are sure that this is only one alive connection, just wait for 5~10s and try again.
If you want to establish a new connection anyway, destroy the previous connection.
If you kill the program before the game finish, we will automaticlly make a fold(give up) decision for you and you are allowed to join back after the game finishing.


#client
Now the client just use the username to join the game. 
If you change the path of the files in the project, You can modify the import path in the client.py as you need.
The proto file is under the communication directory.
If {ISTESTING} is set to True, the ai will run once and exit. During the offical competition, {ISTESTING} shoule be set to False.
There would be {username}_key.txt files after connecting to the server. Don't delete the files unless we ask you to.


#grpc
You don't need to care about the content of *.proto file actually. Your code not interact with grpc module directly.
You just need to return the decision object in your ai function and our code will do this for you.

string token: token from the server
string command: The command from the server. This field will be ignored by server if client send it.
string user: your username
int32 giveup: 0 for not fold, 1 for not fold
int32 allin: 0 for not allin, 1 for allin
int32 check: 0 for not check, 1 for check
int32 callbet: 0 for not callbet and 1 for callbet. If the left money is not enough, this action is the same as allin.
int32 raisebet: 0 for not raisebet, 1 for raisebet to the `amount` field. If the `amount` is 0, this action will be consider as check action.
int32 amount: If raisebet is 1, this field will be the amount you want to raise to in the this round.
              Notice: this field is only the amount in this round, bet in previous round is not included.
int32 pos: The player position in this game.
int32 type: type of this message
int32 actionNum: The number of actions in a game.
repeated int32 userMoney: Used for notify the remained money for the players after a game ends.
